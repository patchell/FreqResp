{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red0\green0\blue160;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs28 \cb3\cf6\b ///------------------------------------------------------------
\par /// Old School plotting routines
\par ///
\par /// Copyright (c) 2015 by James Patchell
\par ///------------------------------------------------------------
\par \b0\cb3\cf12 #include <stdio.h>
\par #include <stdlib.h>
\par #include <math.h>
\par #include <string.h>
\par #include "Complex.h"
\par #include "CPlotPoints.h"
\par #include "FPoints.h"
\par 
\par \cb1\cf0 CPlotPoints\cb3\cf21\b ::\b0\cb1\cf0 CPlotPoints\cb3\cf21\b ()
\par \{
\par     \b0\cb3\cf5 //ctor
\par     \cb1\cf0 m_pH \cb3\cf21\b = \b0\cb3\cf9 0\cb3\cf21\b ;
\par     \b0\cb1\cf0 m_pE \cb3\cf21\b = \b0\cb3\cf9 0\cb3\cf21\b ;
\par \}
\par 
\par \b0\cb1\cf0 CPlotPoints\cb3\cf21\b ::~\b0\cb1\cf0 CPlotPoints\cb3\cf21\b ()
\par \{
\par     \b0\cb3\cf5 //dtor
\par \cb3\cf21\b \}
\par 
\par \b0\cb3\cf6\b void \b0\cb1\cf0 CPlotPoints\cb3\cf21\b ::\b0\cb1\cf0 AddPoints\cb3\cf21\b (\b0\cb1\cf0 FPoints \cb3\cf21\b *\b0\cb1\cf0 pP\cb3\cf21\b )
\par \{
\par     \b0\cb3\cf6\b ///---------------------------------------------------------
\par     /// AddPoints
\par     ///     This function is used to add a set
\par     /// of points to the plot.  It should be
\par     /// noted that the first set of points to
\par     /// add IS the X axis, all the rest are the
\par     /// Y axis.
\par     /// parameters:
\par     ///     pP......pointer to set of points to add
\par     ///--------------------------------------------------------
\par     \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb3\cf6\b this\b0\cb3\cf21\b ->\b0\cb1\cf0 m_pH\cb3\cf21\b )
\par     \{
\par         \b0\cb1\cf0 m_pE\cb3\cf21\b ->\b0\cb1\cf0 SetNext\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b );
\par         \b0\cb1\cf0 m_pE \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ;
\par     \}
\par     \b0\cb3\cf6\b else
\par     \b0\cb3\cf21\b \{
\par         \b0\cb1\cf0 m_pH \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ;
\par         \b0\cb1\cf0 m_pE \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ;
\par     \}
\par \}
\par 
\par \b0\cb3\cf6\b void \b0\cb1\cf0 CPlotPoints\cb3\cf21\b ::\b0\cb1\cf0 CSV\cb3\cf21\b (\b0\cb1\cf0 FILE \cb3\cf21\b *\b0\cb1\cf0 pO\cb3\cf21\b )
\par \{
\par     \b0\cb3\cf6\b ///-----------------------------------------------------
\par     /// CSV
\par     ///     outputs the data in a comma
\par     /// separated format.
\par     /// parameters:
\par     ///     pO.................File to write data to
\par     ///----------------------------------------------------
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 i\cb3\cf21\b ,\b0\cb1\cf0 Npoints\cb3\cf21\b ;
\par     \b0\cb1\cf0 FPoints \cb3\cf21\b *\b0\cb1\cf0 pP\cb3\cf21\b ;
\par      \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ;
\par 
\par     \b0\cb1\cf0 Npoints \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetTotalPoints\cb3\cf21\b ();
\par     \b0\cb3\cf6\b while\b0\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b )
\par     \{
\par         \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%s"\cb3\cf21\b ,\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetName\cb3\cf21\b ());
\par         \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par         \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb1\cf0 pP \cb3\cf21\b == \b0\cb1\cf0 NULL\cb3\cf21\b )
\par             \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "\\n"\cb3\cf21\b );
\par         \b0\cb3\cf6\b else
\par             \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 ","\cb3\cf21\b );
\par     \}
\par      \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 i\cb3\cf21\b <\b0\cb1\cf0 Npoints\cb3\cf21\b ;++\b0\cb1\cf0 i\cb3\cf21\b )
\par      \{
\par         \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ;
\par         \b0\cb3\cf6\b while\b0\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b )
\par         \{
\par             \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%e"\cb3\cf21\b ,\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetVal\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b ) );
\par             \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par             \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb1\cf0 pP \cb3\cf21\b == \b0\cb1\cf0 NULL\cb3\cf21\b )
\par                 \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "\\n"\cb3\cf21\b );
\par             \b0\cb3\cf6\b else
\par                 \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 ","\cb3\cf21\b );
\par         \}
\par      \}
\par \}
\par 
\par \b0\cb3\cf6\b int \b0\cb1\cf0 CPlotPoints\cb3\cf21\b ::\b0\cb1\cf0 PlotChar\cb3\cf21\b (\b0\cb3\cf6\b int \b0\cb1\cf0 i\cb3\cf21\b , \b0\cb3\cf6\b int \b0\cb1\cf0 j\cb3\cf21\b )
\par \{
\par     \b0\cb3\cf6\b ///--------------------------------------------------------
\par     /// PlotChar
\par     ///     This function is used to figure
\par     /// out which character to print to make
\par     /// something that sort of looks like
\par     /// graph paper.
\par     ///
\par     /// parameters:
\par     ///     i.......where we are on the X axis
\par     ///     j......where we are on the Y axis
\par     /// return value:
\par     ///     returns the appropriate character
\par     ///----------------------------------------------------------
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 Space\cb3\cf21\b ;
\par 
\par     \b0\cb3\cf6\b if \b0\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b %\b0\cb3\cf9 10 \cb3\cf21\b && \b0\cb1\cf0 j\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b ) \b0\cb1\cf0 Space \cb3\cf21\b = \b0\cb3\cf18 ' '\cb3\cf21\b ;
\par     \b0\cb3\cf6\b else if \b0\cb3\cf21\b ((\b0\cb1\cf0 i\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b ) && !(\b0\cb1\cf0 j\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b )) \b0\cb1\cf0 Space \cb3\cf21\b = \b0\cb3\cf18 '|'\cb3\cf21\b ;
\par     \b0\cb3\cf6\b else if \b0\cb3\cf21\b (!(\b0\cb1\cf0 i\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b ) && !(\b0\cb1\cf0 j\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b )) \b0\cb1\cf0 Space \cb3\cf21\b = \b0\cb3\cf18 '+'\cb3\cf21\b ;
\par     \b0\cb3\cf6\b else if \b0\cb3\cf21\b (!(\b0\cb1\cf0 i\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b ) && (\b0\cb1\cf0 j\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b )) \b0\cb1\cf0 Space \cb3\cf21\b = \b0\cb3\cf18 '-'\cb3\cf21\b ;
\par     \b0\cb3\cf6\b return \b0\cb1\cf0 Space\cb3\cf21\b ;
\par \}
\par 
\par \b0\cb3\cf6\b void \b0\cb1\cf0 CPlotPoints\cb3\cf21\b ::\b0\cb1\cf0 Plot\cb3\cf21\b (\b0\cb1\cf0 FILE \cb3\cf21\b *\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf6\b const char \b0\cb3\cf21\b *\b0\cb1\cf0 pTitle\cb3\cf21\b )
\par \{
\par     \b0\cb3\cf6\b ///----------------------------------------------------------------------------
\par     /// Plot
\par     ///     This function plots all of the axis.  The first
\par     /// axis in the list is the x axis, and all of the
\par     /// following lists of points are the various functions
\par     /// of the x axis.  The scale for each Y axis is
\par     /// printed reight below the title line.
\par     ///
\par     /// parameters:
\par     ///     pO.........pointer to the file to write data to
\par     ///     pTitle....pointer to the tile of plot
\par     ///----------------------------------------------------------------------------
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 TotalPoints\cb3\cf21\b ;
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 j\cb3\cf21\b ,\b0\cb1\cf0 k\cb3\cf21\b ;
\par     \b0\cb3\cf6\b char \b0\cb3\cf21\b *\b0\cb1\cf0 lab \cb3\cf21\b = \b0\cb3\cf6\b new char\b0\cb3\cf21\b [\b0\cb3\cf9 256\cb3\cf21\b ];
\par     \b0\cb1\cf0 FPoints \cb3\cf21\b *\b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ; \b0\cb3\cf6\b ///fget pointer to X axis points
\par     \b0\cb1\cf0 TotalPoints \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetTotalPoints\cb3\cf21\b ();
\par     \b0\cb3\cf6\b ///print title
\par     \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb1\cf0 pTitle\cb3\cf21\b )
\par     \{
\par         \b0\cb3\cf6\b int \b0\cb1\cf0 len \cb3\cf21\b = \b0\cb1\cf0 strlen\cb3\cf21\b (\b0\cb1\cf0 pTitle\cb3\cf21\b );
\par         \b0\cb3\cf6\b int \b0\cb1\cf0 spaces \cb3\cf21\b = (\b0\cb1\cf0 m_Hieght \cb3\cf21\b - \b0\cb1\cf0 len\cb3\cf21\b )/\b0\cb3\cf9 2\cb3\cf21\b ;
\par         \b0\cb3\cf6\b int \b0\cb1\cf0 extra \cb3\cf21\b = (\b0\cb1\cf0 m_Hieght \cb3\cf21\b - \b0\cb1\cf0 len\cb3\cf21\b )%\b0\cb3\cf9 2\cb3\cf21\b ;
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 j\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 j\cb3\cf21\b <(\b0\cb1\cf0 spaces\cb3\cf21\b -\b0\cb3\cf9 3\cb3\cf21\b );++\b0\cb1\cf0 j\cb3\cf21\b )
\par             \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb3\cf18 '*'\cb3\cf21\b ;
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (;\b0\cb1\cf0 j\cb3\cf21\b <\b0\cb1\cf0 spaces\cb3\cf21\b ;++\b0\cb1\cf0 j\cb3\cf21\b ) \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb3\cf18 ' '\cb3\cf21\b ;
\par         \b0\cb1\cf0 strcpy\cb3\cf21\b (&\b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ],\b0\cb1\cf0 pTitle\cb3\cf21\b );
\par         \b0\cb1\cf0 j \cb3\cf21\b += \b0\cb1\cf0 len\cb3\cf21\b ;
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 k\cb3\cf21\b <\b0\cb3\cf9 3\cb3\cf21\b ;++\b0\cb1\cf0 j\cb3\cf21\b ,++\b0\cb1\cf0 k\cb3\cf21\b ) \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb3\cf18 ' '\cb3\cf21\b ;
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 k\cb3\cf21\b <(\b0\cb1\cf0 spaces\cb3\cf21\b -\b0\cb3\cf9 3 \cb3\cf21\b + \b0\cb1\cf0 extra\cb3\cf21\b );++\b0\cb1\cf0 k\cb3\cf21\b ,++\b0\cb1\cf0 j\cb3\cf21\b ) \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb3\cf18 '*'\cb3\cf21\b ;
\par         \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb3\cf9 0\cb3\cf21\b ;
\par         \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%s\\n"\cb3\cf21\b ,\b0\cb1\cf0 lab\cb3\cf21\b );
\par     \}
\par     \b0\cb3\cf6\b ///Scale Data
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 i\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;
\par     \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b (); \b0\cb3\cf5 //get first Y axis
\par     \cb3\cf6\b while\b0\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b )
\par     \{
\par         \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb3\cf6\b this\b0\cb3\cf21\b ->\b0\cb1\cf0 m_Hieght\cb3\cf21\b ==\b0\cb3\cf9 0\cb3\cf21\b ) \b0\cb1\cf0 m_Hieght \cb3\cf21\b = \b0\cb3\cf9 80\cb3\cf21\b ;
\par         \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 Scale\cb3\cf21\b (\b0\cb1\cf0 m_Hieght\cb3\cf21\b );
\par         \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par         ++\b0\cb1\cf0 i\cb3\cf21\b ;    \b0\cb3\cf6\b ///count the number of axis
\par     \b0\cb3\cf21\b \}
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 TotalAxis \cb3\cf21\b = \b0\cb1\cf0 i\cb3\cf21\b ;
\par     \b0\cb3\cf6\b ///Axis lableling
\par    \b0\cb3\cf6\b double \b0\cb3\cf21\b *\b0\cb1\cf0 pAxisInc \cb3\cf21\b = \b0\cb3\cf6\b new double\b0\cb3\cf21\b [\b0\cb1\cf0 TotalAxis\cb3\cf21\b ];
\par    \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ;
\par    \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();  \b0\cb3\cf6\b ///first Y axis
\par    \b0\cb1\cf0 i \cb3\cf21\b = \b0\cb3\cf9 0\cb3\cf21\b ;
\par    \b0\cb3\cf6\b while\b0\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b )
\par    \{
\par         \b0\cb1\cf0 pAxisInc\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ++] = (\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetMax\cb3\cf21\b () - \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetMin\cb3\cf21\b ())/(\b0\cb3\cf6\b double\b0\cb3\cf21\b (\b0\cb1\cf0 m_Hieght\cb3\cf21\b )/\b0\cb3\cf9 10.0\cb3\cf21\b );
\par         \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par    \}
\par    \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ;
\par    \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();  \b0\cb3\cf6\b ///first Y axis
\par    \b0\cb1\cf0 i \cb3\cf21\b = \b0\cb3\cf9 0\cb3\cf21\b ;
\par    \b0\cb3\cf6\b int \b0\cb1\cf0 axis \cb3\cf21\b = \b0\cb3\cf9 0\cb3\cf21\b ;
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 YaxisLabels \cb3\cf21\b = (\b0\cb1\cf0 m_Hieght\cb3\cf21\b /\b0\cb3\cf9 10\cb3\cf21\b ) + \b0\cb3\cf9 1\cb3\cf21\b ;
\par    \b0\cb3\cf6\b while\b0\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b )
\par    \{
\par 
\par         \b0\cb3\cf6\b int \b0\cb1\cf0 j\cb3\cf21\b ,\b0\cb1\cf0 k\cb3\cf21\b ;
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 j\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ,\b0\cb1\cf0 i\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 j\cb3\cf21\b <\b0\cb1\cf0 YaxisLabels\cb3\cf21\b ;++\b0\cb1\cf0 j\cb3\cf21\b )
\par         \{
\par             \b0\cb1\cf0 i \cb3\cf21\b += \b0\cb1\cf0 sprintf\cb3\cf21\b (&\b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ],\b0\cb3\cf16 "%6.2lf"\cb3\cf21\b ,\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetMin\cb3\cf21\b () + \b0\cb1\cf0 pAxisInc\cb3\cf21\b [\b0\cb1\cf0 axis\cb3\cf21\b ] * \b0\cb3\cf6\b double\b0\cb3\cf21\b (\b0\cb1\cf0 j\cb3\cf21\b ));
\par             \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb1\cf0 j\cb3\cf21\b <\b0\cb1\cf0 YaxisLabels\cb3\cf21\b -\b0\cb3\cf9 1\cb3\cf21\b )
\par                 \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b =\b0\cb1\cf0 i\cb3\cf21\b ;\b0\cb1\cf0 k\cb3\cf21\b %\b0\cb3\cf9 10\cb3\cf21\b ;++\b0\cb1\cf0 k\cb3\cf21\b )
\par                     \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ++] = \b0\cb3\cf18 ' '\cb3\cf21\b ;
\par         \}
\par         \b0\cb1\cf0 sprintf\cb3\cf21\b (&\b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ],\b0\cb3\cf16 "(%c)%s\\n"\cb3\cf21\b ,\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetDispChar\cb3\cf21\b (),\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetName\cb3\cf21\b ());
\par         \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%s"\cb3\cf21\b ,\b0\cb1\cf0 lab\cb3\cf21\b );
\par         ++\b0\cb1\cf0 axis\cb3\cf21\b ;
\par         \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par    \}
\par     \b0\cb3\cf6\b ///----------------------------------------------------
\par     /// Draw Axis and plot points
\par     ///----------------------------------------------------
\par     \b0\cb1\cf0 FPoints\cb3\cf21\b ** \b0\cb1\cf0 axOrder \cb3\cf21\b = \b0\cb3\cf6\b new \b0\cb1\cf0 FPoints\cb3\cf21\b *[\b0\cb1\cf0 TotalAxis\cb3\cf21\b ];
\par     \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ;
\par     \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par     \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 i\cb3\cf21\b <\b0\cb1\cf0 TotalAxis\cb3\cf21\b ;++\b0\cb1\cf0 i\cb3\cf21\b ,\b0\cb1\cf0 pP\cb3\cf21\b =\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b () )
\par         \b0\cb1\cf0 axOrder\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ] = \b0\cb1\cf0 pP\cb3\cf21\b ;
\par     \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 k\cb3\cf21\b <\b0\cb1\cf0 TotalPoints\cb3\cf21\b ;++\b0\cb1\cf0 k\cb3\cf21\b )  \b0\cb3\cf6\b ///plot all points
\par     \b0\cb3\cf21\b \{
\par         \b0\cb1\cf0 SortPoints\cb3\cf21\b (\b0\cb1\cf0 axOrder\cb3\cf21\b ,\b0\cb1\cf0 TotalAxis\cb3\cf21\b ,\b0\cb1\cf0 k\cb3\cf21\b );    \b0\cb3\cf6\b ///sort points
\par         ///draw plot for this X point
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ,\b0\cb1\cf0 j\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 i\cb3\cf21\b <\b0\cb1\cf0 TotalAxis\cb3\cf21\b ;++\b0\cb1\cf0 i\cb3\cf21\b )
\par         \{
\par             \b0\cb3\cf6\b for\b0\cb3\cf21\b (;\b0\cb1\cf0 j\cb3\cf21\b <\b0\cb3\cf6\b int\b0\cb3\cf21\b (\b0\cb1\cf0 axOrder\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ]->\b0\cb1\cf0 GetScaledVal\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b ));++\b0\cb1\cf0 j\cb3\cf21\b )
\par             \{
\par                 \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb1\cf0 PlotChar\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b ,\b0\cb1\cf0 j\cb3\cf21\b );
\par             \}
\par             \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b -\b0\cb3\cf9 1\cb3\cf21\b ] = \b0\cb1\cf0 axOrder\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ]->\b0\cb1\cf0 GetDispChar\cb3\cf21\b ();
\par         \}
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (;\b0\cb1\cf0 j\cb3\cf21\b <\b0\cb1\cf0 m_Hieght\cb3\cf21\b ;++\b0\cb1\cf0 j\cb3\cf21\b )
\par             \b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb1\cf0 PlotChar\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b ,\b0\cb1\cf0 j\cb3\cf21\b );
\par         \b0\cb3\cf6\b ///add X axis value
\par         \b0\cb1\cf0 sprintf\cb3\cf21\b (&\b0\cb1\cf0 lab\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ],\b0\cb3\cf16 "%8.6e"\cb3\cf21\b ,\b0\cb1\cf0 m_pH\cb3\cf21\b ->\b0\cb1\cf0 GetVal\cb3\cf21\b (\b0\cb1\cf0 k\cb3\cf21\b ));
\par         \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%s\\n"\cb3\cf21\b ,\b0\cb1\cf0 lab\cb3\cf21\b );
\par 
\par     \}
\par     \b0\cb3\cf6\b delete\b0\cb3\cf21\b [] \b0\cb1\cf0 axOrder\cb3\cf21\b ;
\par     \b0\cb3\cf6\b delete\b0\cb3\cf21\b [] \b0\cb1\cf0 lab\cb3\cf21\b ;
\par \}
\par 
\par \b0\cb3\cf6\b void \b0\cb1\cf0 CPlotPoints\cb3\cf21\b ::\b0\cb1\cf0 SortPoints\cb3\cf21\b (\b0\cb1\cf0 FPoints \cb3\cf21\b **\b0\cb1\cf0 ppP\cb3\cf21\b , \b0\cb3\cf6\b int \b0\cb1\cf0 n\cb3\cf21\b , \b0\cb3\cf6\b int \b0\cb1\cf0 index\cb3\cf21\b )
\par \{
\par     \b0\cb3\cf6\b ///----------------------------------------------------------
\par     /// SortPoints
\par     ///     This function uses a very simple
\par     /// algorithm to sort the points to be
\par     /// plotted.  We don't really need anything
\par     /// very fancy since we are not going to
\par     /// be sorting any large lists.
\par     ///
\par     /// parameters:
\par     ///     ppP......pointer to an array of FPoints
\par     ///     n...........Number of Y axis
\par     ///     index...which X axis point we are on
\par     ///-------------------------------------------------------------
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 i\cb3\cf21\b ,\b0\cb1\cf0 j\cb3\cf21\b ;
\par 
\par     \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 i\cb3\cf21\b <(\b0\cb1\cf0 n\cb3\cf21\b -\b0\cb3\cf9 1\cb3\cf21\b );++\b0\cb1\cf0 i\cb3\cf21\b )
\par     \{
\par         \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 j\cb3\cf21\b =\b0\cb1\cf0 i\cb3\cf21\b +\b0\cb3\cf9 1\cb3\cf21\b ;\b0\cb1\cf0 j\cb3\cf21\b <\b0\cb1\cf0 n\cb3\cf21\b ;++\b0\cb1\cf0 j\cb3\cf21\b )
\par         \{
\par             \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb1\cf0 ppP\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ]->\b0\cb1\cf0 GetScaledVal\cb3\cf21\b (\b0\cb1\cf0 index\cb3\cf21\b ) > \b0\cb1\cf0 ppP\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ]->\b0\cb1\cf0 GetScaledVal\cb3\cf21\b (\b0\cb1\cf0 index\cb3\cf21\b ))
\par             \{
\par                 \b0\cb3\cf6\b ///then swap
\par                 \b0\cb1\cf0 FPoints \cb3\cf21\b *\b0\cb1\cf0 pT \cb3\cf21\b = \b0\cb1\cf0 ppP\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ];
\par                 \b0\cb1\cf0 ppP\cb3\cf21\b [\b0\cb1\cf0 i\cb3\cf21\b ] = \b0\cb1\cf0 ppP\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ];
\par                 \b0\cb1\cf0 ppP\cb3\cf21\b [\b0\cb1\cf0 j\cb3\cf21\b ] = \b0\cb1\cf0 pT\cb3\cf21\b ;
\par             \}
\par         \}
\par     \}
\par \}
\par 
\par \b0\cb3\cf6\b void \b0\cb1\cf0 CPlotPoints\cb3\cf21\b ::\b0\cb1\cf0 PrintPoints\cb3\cf21\b (\b0\cb1\cf0 FILE \cb3\cf21\b *\b0\cb1\cf0 pO\cb3\cf21\b )
\par \{
\par     \b0\cb3\cf6\b ///------------------------------------------------------------
\par     /// PrintPoints
\par     ///     Outputs the set of points.
\par     /// parameters:
\par     ///     pO........pointer to output device
\par     ///------------------------------------------------------------
\par     \b0\cb1\cf0 FPoints \cb3\cf21\b *\b0\cb1\cf0 pP\cb3\cf21\b ;
\par      \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ;
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 i\cb3\cf21\b ;
\par 
\par     \b0\cb3\cf6\b int \b0\cb1\cf0 Npoints \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetTotalPoints\cb3\cf21\b ();
\par     \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "Item\\t"\cb3\cf21\b );
\par     \b0\cb3\cf6\b while\b0\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b )
\par     \{
\par         \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%s\\t"\cb3\cf21\b ,\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetName\cb3\cf21\b ());
\par         \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par         \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb1\cf0 pP \cb3\cf21\b == \b0\cb1\cf0 NULL\cb3\cf21\b )
\par             \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "\\n"\cb3\cf21\b );
\par         \b0\cb3\cf6\b else
\par             \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "\\t"\cb3\cf21\b );
\par     \}
\par      \b0\cb3\cf6\b for\b0\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b =\b0\cb3\cf9 0\cb3\cf21\b ;\b0\cb1\cf0 i\cb3\cf21\b <\b0\cb1\cf0 Npoints\cb3\cf21\b ;++\b0\cb1\cf0 i\cb3\cf21\b )
\par      \{
\par         \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%4d\\t"\cb3\cf21\b ,\b0\cb1\cf0 i\cb3\cf21\b );
\par         \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 m_pH\cb3\cf21\b ;
\par         \b0\cb3\cf6\b while\b0\cb3\cf21\b (\b0\cb1\cf0 pP\cb3\cf21\b )
\par         \{
\par             \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "%3.9e"\cb3\cf21\b ,\b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetVal\cb3\cf21\b (\b0\cb1\cf0 i\cb3\cf21\b ) );
\par             \b0\cb1\cf0 pP \cb3\cf21\b = \b0\cb1\cf0 pP\cb3\cf21\b ->\b0\cb1\cf0 GetNext\cb3\cf21\b ();
\par             \b0\cb3\cf6\b if\b0\cb3\cf21\b (\b0\cb1\cf0 pP \cb3\cf21\b == \b0\cb1\cf0 NULL\cb3\cf21\b )
\par                 \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "\\n"\cb3\cf21\b );
\par             \b0\cb3\cf6\b else
\par                 \b0\cb1\cf0 fprintf\cb3\cf21\b (\b0\cb1\cf0 pO\cb3\cf21\b ,\b0\cb3\cf16 "\\t"\cb3\cf21\b );
\par         \}
\par      \}
\par \}
\par 
\par 
\par }